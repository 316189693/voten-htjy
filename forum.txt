





安装Composer

curl -sS https://getcomposer.org/installer | php


验证是否安装成功

php composer.phar


docker-compose up -d nginx mysql redis workspace elasticsearch laravel-echo-server

cd /d/forum/voten/laradock/

docker-compose exec workspace bash

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; 

ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root'; 

ALTER USER 'default'@'%' IDENTIFIED WITH mysql_native_password BY 'root'; 


npm i cnpm -g --registry=http://registry.npm.taobao.org
cnpm i node-sass -g

npm install node-sass --registry=http://registry.npm.taobao.org

docker run -itd -p 9200:9200 -p 9300:9300 -v /data/forum/es:/usr/share/elasticsearch/data  -e discovery.type=single-node -e bootstrap.memory_lock=true -e cluster.name=elasticsearch -e ES_JAVA_OPTS="$JAVA_OPTS -Xms512m -Xmx2g"  dev-forum-elasticsearch 


chown -R telegraf:docker /data/forum/es

 "cluster.name=elasticsearch",
                "bootstrap.memory_lock=true"

	
openssl genrsa -des3 -out server.key 2048
openssl req -new -key server.key -out server.csr
openssl req -new -x509 -key server.key -out ca.crt -days 3650

openssl x509 -req -days 3650 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt


key pass:
htjy@998877#djhs

challenge pass:
htjy@455665#djhs



安装
composer require tamayo/laravel-scout-elastic


su laradock
composer require league/flysystem-aws-s3-v3
composer require pda/pheanstalk

composer install


Application key [base64:R7KXIqurvC/BxgwSxnmZxACqA0uKK9KTtmyMoZDn8wE=] set successfully.



npm install -g laravel-echo-server


docker-compose up -d nginx mysql redis   laravel-echo-server beanstalkd



composer require Guzzlehttp/guzzle



问题： Error starting userland proxy: mkdir /port/tcp:0.0.0.0:6379:tcp:172.22.0.3:6379: input/output error
解决： 重启docker

问题：ERROR: for mysql  Cannot start service mysql: driver failed programming external connectivity on endpoint laradock_mysql_1 (adb0de8ecb9137061b1d69f848f35d78b253db58bef0c8b9ae7325378c50f8d7): Error starting userland proxy: Bind for 0.0.0.0:3306: unexpected error Permission denied
解决： 端口被占用， 关闭占用进程， 然后重启容器
   netstat -aon | grep 3306
   tasklist| grep 3788
   kill -9 3788 


问题： 使用 php artisan scout:import "\App\Channel" import, 显示导入成功， 但是ES 没有生成index， 跟踪代码发现错误如下：
"mapper_parsing_exception","reason":"analyzer [ik_smart] not found for field [name]"}}}]}   
   
解决法法：   
   问题是ik_smart没有安装， 直接改成english
   
问题：删除ES index
解决：http://192.168.199.218:9200/laravel/  DELETE   


问题： Access denied for user 'root'@'172.17.0.7' (using password: YES) (SQL: select * from information
   解决方法： 进到mysql的container， 然后将user为root的host改为%，  update mysql.user set host = '%' where user='root'; 

   
   
   curl -X POST \
  http://172.17.0.5:9200/laravel/_delete_by_query \
  -H 'cache-control: no-cache' \
  -H 'content-type: application/json' \
  -H 'postman-token: 8df0576e-5624-6098-c089-308a62d2a14d' \
   -d '{}'
   
      curl -X POST \
  http://172.17.0.5:9200/laravel\
  -H 'cache-control: no-cache' \
  -H 'content-type: application/json' \
  -H 'postman-token: 8df0576e-5624-6098-c089-308a62d2a14d' \
   -d '{}'
   
   
   curl -X GET  http://172.17.0.5:9200/laravel
   
   curl -X DELETE \
  http://172.17.0.5:9200/laravel/ \
  -H 'cache-control: no-cache' \
  -H 'postman-token: 13d525c4-beb2-67b6-7e3f-955a19ea57da'
   
   
   http://172.17.0.5:9200/_cluster/health\?pretty

http://172.17.0.5:9200/_cat/shards

curl -X GET  http://172.17.0.5:9200/_mappings?pretty=true

curl -X DELETE http://172.17.0.5:9200/laravel/_delete_by_query

curl -X GET http://172.17.0.5:9200/laravel/?pretty
   
   php artisan scout:import "\App\Channel"
   
docker-compose up -d nginx mysql redis   laravel-echo-server beanstalkd

docker-compose exec workspace bash

docker-compose exec nginx bash


select * from sql_mirror where sql_mirror_table = 'tms_order' and sql_mirror_row_id = 1991379;


select * from sql_mirror where sql_mirror_table = 'tms_order' and sql_mirror_row_id = 1988109;

select * from sql_mirror where sql_mirror_row_id = 1988109;


su laradock
composer install
php artisan key:generate
php artisan migrate
php artisan passport:install
npm install
npm run production

php artisan db:seed --class=AdminUserSeeder


docker exec -it  bash
sudo su -
mkdir vendor
chmod -R 777 vendor
chown -R jenkins vendor
chgrp -R jenkins vendor
cd /var/lib/jenkins/workspace/dev-forum/storage
chmod -R 777 logs
cd /var/lib/jenkins/workspace/dev-forum/bootstrap
cd /var/lib/jenkins/workspace/dev-forum/
chmod -R 777 .env
chmod -R 777 cache
chmod -R 777 package.json
mkdir node_modules
chmod -R 777 node_modules
chown -R jenkins node_modules
chgrp -R jenkins node_modules
chmod -R 777 /var/lib/jenkins/workspace/dev-forum
composer install
php artisan key:generate
php artisan passport:install

php artisan es:init 

npm install
 chmod -R 777 public
npm run production



chown -R www-data public
chgrp -R www-data public


docker-compose exec workspace bash
su laradock
composer install

php artisan migrate
php artisan passport:install
npm install
npm run production

php artisan db:seed --class=AdminUserSeeder

php artisan es:init 



/var/www/storage/logs/laravel.log

CREATE DATABASE IF NOT EXISTS `default` ;
   GRANT ALL ON `default`.* TO 'root'@'%' ;
   GRANT ALL ON `default`.* TO 'root'@'%' ;
   
GRANT ALL PRIVILEGES ON `default`.* TO 'default'@'%' IDENTIFIED BY 'default';

GRANT ALL PRIVILEGES ON `default`.* TO 'default'@'%'

select * from mysql.user where user='default';

SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;

grant all privileges on *.* to 'default'@'localhost' identified by 'default' with grant option;

flush privileges;


select * from information_schema.tables where table_schema = 'default' and table_name = 'migrations';

'default'@'172.17.0.7'

echo  server，
 npm install -g laravel-echo-server
laravel-echo-server init
laravel-echo-server start
laravel-echo-server start --config="y"



php artisan config:cache
php artisan config:clear

# elasticsearch 配置
ELASTICSEARCH_INDEX=laravel
# elasticsearch 地址
ELASTICSEARCH_HOST=http://localhost
ELASTICSEARCH_PORT=9200






Personal access client created successfully.
Client ID: 9
Client Secret: L4AZJd09XVRic2dAcJFMrycuCBdN6e31KLIPdpZk
Password grant client created successfully.
Client ID: 10
Client Secret: ebq5LnUvuxWVVQYP6YZd32QD2gtV13ntwctlWrRh



1. 安装docker

cd /d/forum/voten/laradock/


37730
docker inspect 0e50 |grep 172

docker-compose up -d nginx mysql redis workspace elasticsearch laravel-echo-server 

docker-compose exec workspace bash
su laradock
composer install
php artisan key:generate
php artisan migrate
php artisan passport:install
npm install
npm run production

php artisan db:seed --class=AdminUserSeeder

php artisan es:init 


php artisan scout:import "\App\Channel"

php artisan scout:all

php artisan cache:clear
php artisan route:clear
php artisan config:cache

php artisan config:cache
php artisan config:clear

php artisan scout:flush "\App\Channel"


mysql:




WORKDIR /var/www
COPY forum /
USER unisforum
RUN composer install; \
    php artisan key:generate; \
    php artisan migrate; \
    php artisan passport:install; \
    npm install; \
    npm run production; \
    # create a user [admin password]
    php artisan db:seed --class=AdminUserSeeder \
    php artisan es:init \
	
	
	
	WORKDIR /var/www
	USER unisforum
RUN composer install &&\
    php artisan key:generate &&\
    php artisan migrate &&\
    php artisan passport:install &&\
    npm install &&\
    npm run production &&\
    php artisan db:seed --class=AdminUserSeeder &&\
    php artisan es:init

USER root

# Set default work directory
WORKDIR /var/www

http://localhost:9200/_cluster/health\?pretty

http://localhost:9200/_cat/shards

http://localhost:9200/_mappings?pretty=true

http://localhost:9200/laravel/_delete_by_query

http://localhost:9200/laravel/?pretty







1. 用docker部署一个本地开发环境


要启用维护模式，只需执行下面的 Artisan 命令 down：
php artisan down

向 down 命令提供 message 和 retry 选项。其中 message 选项的值可用于显示或记录自定义消息，而 retry 值可用于设置 HTTP 请求头中 Retry-After 的值：
php artisan down --message="Upgrading Database" --retry=60

即使在维护模式下，也可以使用命令 allow 选项允许特定的 IP 地址或网络访问应用程序：
php artisan down --allow=127.0.0.1 --allow=192.168.0.0/16


要关闭维护模式，请使用 up 命令：
php artisan up



storage/app/public 可以用来存储用户生成的文件，比如需要公开访问的用户头像。你应该创建一个 public/storage 的软链接指向这个目录。你可以直接通过 命令来创建此链接：
 php artisan storage:link
 
 
 
 全局约束
如果你希望某个具体的路由参数都遵循同一个正则表达式的约束，就使用 pattern 方法在 RouteServiceProvider 的 boot 方法中定义这些模式：
public function boot()
{
    Route::pattern('id', '[0-9]+');

    parent::boot();
}


通过运行 make:middleware Artisan 命令来创建新的中间件
php artisan make:middleware CheckAge




1. 安装软件

   构建laravel 环境
   广播pusher的配置
      composer require pusher/pusher-php-server "~3.0"
	  配置echo+scoket.io   tlaverdure/laravel-echo-server
	  
	  安装echo
	  npm install --save laravel-echo pusher-js
	  
	  

2. 配置系统

3. 部署代码

4. 自动化部署

5. 打包成docker 那就可以到处部署了


使用docker file来搭建和安装程序需要的运行环境， 然后通过和bitbuck的配合， 就可以实现一次构建，到处部署的效果。

docker
  1. 写 docker file
  
  
  
  ubuntu安装软件命令
  
  1. 设置密码
  sudo su -
  输入你的账户的密码
   passwd 
   输入新的root密码
   再次输入新的root密码


  
  sudo apt-get install git
  
  
  export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_91
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
  
  修改了/etc/profile文件要重启才能生效，不过可以执行下面命令使当前bash环境生效：
  source /etc/profile
  
  
  
  部署到prod
  https://github.com/summerblue/laravel-ubuntu-init
  
  https://laravelacademy.org/post/8689.html
  https://laravel-china.org/topics/3319/deploy-your-laravel-project-using-docker
  
  git clone https://htjy@bitbucket.org/logisticsteam-dev/unis-forum.git
  
  
  
Ubuntu 16.04.2 LTS
Nginx 1.10+
MySQL 5.7+ (to use mariaDB, you must modify json type migration columns to blob by running sed -i 's/json(/binary(/g' * inside the database/migrations/ directory in Linux)
PHP 7.1+
Redis 3.0+
Git 2.8.4+
Pusher (Voten.co uses laravel-echo-server on production server)
Algolia Search
  
  
  
  
 评估所需空间大小
 
 https://juejin.im/post/5b5432e95188251ac8584dd5
 https://github.com/laradock/laradock
 
 
安装php  https://www.mf8.biz/ubuntu-debian-install-php7-3/
apt -y install software-properties-common apt-transport-https lsb-release ca-certificates
add-apt-repository ppa:ondrej/php 
apt update
 
 
FROM php:7
RUN docker-php-ext-install pcntl pdo Mbstring 
RUN apt-get update -y && apt-get install -y openssl zip unzip git wget gnupg
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -
RUN apt-get install -y nodejs
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer





FROM daocloud.io/nginx:1.13-alpine

MAINTAINER coding01 <yemeishu@126.com>

ADD vhost.conf /etc/nginx/conf.d/default.conf

WORKDIR /var/www

作者：coding01
链接：https://juejin.im/post/5b5432e95188251ac8584dd5
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


 
  
  
  
  



